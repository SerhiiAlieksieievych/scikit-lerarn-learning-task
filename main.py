from sklearn.datasets import load_iris
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# a
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö Iris
iris_data = load_iris()

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ pandas DataFrame
iris_df = pd.DataFrame(data=iris_data.data, columns=iris_data.feature_names)

# –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å –∑ —á–∏—Å–ª–æ–≤–∏–º–∏ –º—ñ—Ç–∫–∞–º–∏ –∫–ª–∞—Å—ñ–≤ (0, 1, 2)
iris_df['target'] = iris_data.target

# –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–ª–∞—Å—ñ–≤ (setosa, versicolor, virginica)
iris_df['species'] = iris_df['target'].apply(lambda x: iris_data.target_names[x])

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
print("üîπ –§–æ—Ä–º–∞ DataFrame:", iris_df.shape)
print("\nüîπ –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö:")
print(iris_df.dtypes)
print("\nüîπ –ü–µ—Ä—à—ñ 3 —Ä—è–¥–∫–∏:")
print(iris_df.head(3))

#b
# –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –æ–±'—î–∫—Ç–∞ iris_data
print("üîπ –ö–ª—é—á—ñ –æ–±'—î–∫—Ç–∞ iris_data:")
print(iris_data.keys())

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –¥–∞–Ω–∏—Ö
print("\nüîπ –û–ø–∏—Å –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö:")
print(iris_data.DESCR)

#c
# –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö
print("üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ –∫–æ–∂–Ω—ñ–π –æ–∑–Ω–∞—Ü—ñ:")
print(iris_df.describe())

#d
# –°–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è Iris-setosa
setosa_df = iris_df[iris_df['species'] == 'setosa']
print("üîπ Iris-setosa (–ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤):")
print(setosa_df.head())

# –°–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è Iris-versicolor
versicolor_df = iris_df[iris_df['species'] == 'versicolor']
print("\nüîπ Iris-versicolor (–ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤):")
print(versicolor_df.head())

# –°–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è Iris-virginica
virginica_df = iris_df[iris_df['species'] == 'virginica']
print("\nüîπ Iris-virginica (–ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤):")
print(virginica_df.head())

#e
# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É
print("üîπ –ü–æ–±—É–¥–æ–≤–∞ pairplot –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É...")
sns.pairplot(iris_df, hue='species', diag_kind='hist')
plt.suptitle("–í–∑–∞—î–º–æ–∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ –æ–∑–Ω–∞–∫–∞–º–∏ Iris", y=1.02)
plt.show()

#f
# –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ –≤–∏–¥—É
species_counts = iris_df['species'].value_counts()

# –ü–æ–±—É–¥–æ–≤–∞ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
print("üîπ –ü–æ–±—É–¥–æ–≤–∞ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ —á–∞—Å—Ç–æ—Ç–∏ –≤–∏–¥—ñ–≤...")
sns.barplot(x=species_counts.index, y=species_counts.values, palette="pastel")

# –î–µ–∫–æ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞
plt.title("–ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–∂–Ω–æ–≥–æ –≤–∏–¥—É Iris")
plt.xlabel("–í–∏–¥")
plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤")
plt.show()

#g
# –û–∑–Ω–∞–∫–∏ (–∞—Ç—Ä–∏–±—É—Ç–∏): –ø–µ—Ä—à—ñ 4 –∫–æ–ª–æ–Ω–∫–∏
X = iris_df[iris_data.feature_names]

# –ú—ñ—Ç–∫–∏: —á–∏—Å–ª–æ–≤—ñ –∫–ª–∞—Å–∏ (0, 1, 2)
y = iris_df['target']

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç–µ–π
print("üîπ –§–æ—Ä–º–∞ X (–æ–∑–Ω–∞–∫–∏):", X.shape)
print("üîπ –§–æ—Ä–º–∞ y (–º—ñ—Ç–∫–∏):", y.shape)

# –í–∏–≤–µ–¥–µ–º–æ –ø–µ—Ä—à—ñ 5 –∑–Ω–∞—á–µ–Ω—å X —ñ y
print("\nüîπ –ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ X:")
print(X.head())

print("\nüîπ –ü–µ—Ä—à—ñ 5 –º—ñ—Ç–æ–∫ y:")
print(y.head())

#h
from sklearn.model_selection import train_test_split

# –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∑ —Ñ—ñ–∫—Å–∞—Ü—ñ—î—é –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ (random_state –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ:", X_train.shape[0])
print("üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—ñ:", X_test.shape[0])

print("\nüîπ X_train (–ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤):")
print(X_train.head())

print("\nüîπ y_train (–ø–µ—Ä—à—ñ 5 –º—ñ—Ç–æ–∫):")
print(y_train.head())

#i
# –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ –≤—Å—ñ –Ω–∞–∑–≤–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ —É —á–∏—Å–ª–∞
print("üîπ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Ç–∫–∏ –∫–ª–∞—Å—ñ–≤ —É y:", y.unique())

# –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ 80% train / 20% test
X_train_80, X_test_20, y_train_80, y_test_20 = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("üîπ –†–æ–∑–º—ñ—Ä–∏ 80/20 —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è:")
print("  - –ù–∞–≤—á–∞–ª—å–Ω—ñ X:", X_train_80.shape)
print("  - –¢–µ—Å—Ç–æ–≤—ñ X:", X_test_20.shape)

#j
# –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è 70/30
X_train_knn, X_test_knn, y_train_knn, y_test_knn = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è KNN –∑ 5 —Å—É—Å—ñ–¥–∞–º–∏
knn = KNeighborsClassifier(n_neighbors=5)

# –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
knn.fit(X_train_knn, y_train_knn)

# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—ñ
y_pred = knn.predict(X_test_knn)

# –í–∏–≤—ñ–¥ –ø–µ—Ä—à–∏—Ö 10 –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
print("üîπ –ü–µ—Ä—à—ñ 10 –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å:", y_pred[:10])
print("üîπ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å–ø—Ä–∞–≤–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:", y_test_knn.values[:10])

# –û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ
accuracy = accuracy_score(y_test_knn, y_pred)
print(f"\n‚úÖ –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ KNN (k=5): {accuracy:.2%}")